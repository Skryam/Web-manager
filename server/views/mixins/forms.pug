- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const checkId = (option) => (!option ? [] : Array.isArray(option) ? option : [option]);

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, labelName = null)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin select(entity, propertyName, errors = {}, labelName = null, currentOption)
  - optArr = checkId(currentOption)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      option(value='')
      each option in entity
        - checkFullName = option.constructor.name === 'User' ? option.fullName() : option.name
        - isSelected = optArr.some(elem => parseInt(elem, 10) === parseInt(option.id, 10))
        option(value=option.id selected=isSelected)= checkFullName
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {}, labelName = null)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= value=_.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(entity, propertyName, errors, labelName = null, currentOption)
  - optArr = checkId(currentOption)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .input-group.mb-3(class=(errors[propertyName] && 'has-danger'))
    label.input-group-text(
      for= inputId
    )= labelName
    select(
      id= inputId
      name=propertyName
      class=classLine
    )&attributes(attributes)
      option(value='')
      each option in entity
        - checkFullName = option.constructor.name === 'User' ? option.fullName() : option.name
        - isSelected = optArr.some(elem => parseInt(elem, 10) === parseInt(option.id, 10))
        option(value=option.id selected=isSelected)= checkFullName